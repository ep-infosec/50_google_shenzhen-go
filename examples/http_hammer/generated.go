// The http_hammer command was automatically generated by Shenzhen Go.
package main

import (
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"os/signal"
	"runtime"
	"sort"
	"sync"
	"time"
)

var _ = runtime.Compiler

func Aggregate_and_print(summary <-chan map[int]int) {
	// Aggregate and print

	start := time.Now()
	sum := make(map[int]int)
	for s := range summary {
		for k, n := range s {
			sum[k] += n
		}
	}
	dur := time.Since(start)
	fmt.Printf("Duration: %v\n", dur)
	keys := make([]int, 0, len(sum))
	for k := range sum {
		keys = append(keys, k)
	}
	sort.Ints(keys)
	for _, k := range keys {
		fmt.Printf("Status %d: %d (%f / sec) \n", k, sum[k], float64(sum[k])/dur.Seconds())
	}

}

func HTTP_GET_requests(interrupt <-chan struct{}, summary chan<- map[int]int) {
	// HTTP GET requests
	multiplicity := 2 * runtime.NumCPU()

	defer func() {
		close(summary)
	}()
	var multWG sync.WaitGroup
	multWG.Add(multiplicity)
	defer multWG.Wait()
	for n := 0; n < multiplicity; n++ {
		instanceNumber := n
		go func() {
			defer multWG.Done()
			codes := make(map[int]int)
			url := fmt.Sprintf("http://localhost:8765/mandelbrot?x=%d&y=%d&z=0",
				instanceNumber%2-1,
				(instanceNumber/2)%2-1)
		spamLoop:
			for {
				select {
				case <-interrupt:
					break spamLoop
				default:
					// Nop.
				}
				func() {

					resp, err := http.Get(url)
					if err != nil {
						return
					}
					defer resp.Body.Close()
					codes[resp.StatusCode]++
					if _, err := io.Copy(ioutil.Discard, resp.Body); err != nil {
						return
					}
				}()
			}
			summary <- codes
		}()
	}
}

func Wait_for_C(interrupt chan<- struct{}) {
	// Wait for ^C
	fmt.Println("Press Ctrl-C or send SIGINT to stop")
	it := make(chan os.Signal, 1)
	signal.Notify(it, os.Interrupt)
	<-it
	fmt.Println()
	close(interrupt)

}

func main() {

	channel0 := make(chan struct{}, 0)
	channel1 := make(chan map[int]int, 0)

	var wg sync.WaitGroup

	wg.Add(1)
	go func() {
		Aggregate_and_print(channel1)
		wg.Done()
	}()

	wg.Add(1)
	go func() {
		HTTP_GET_requests(channel0, channel1)
		wg.Done()
	}()

	wg.Add(1)
	go func() {
		Wait_for_C(channel0)
		wg.Done()
	}()

	// Wait for the various goroutines to finish.
	wg.Wait()
}
