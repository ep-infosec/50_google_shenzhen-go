// The demo command was automatically generated by Shenzhen Go.
package main

import (
	"fmt"
	"runtime"
	"sync"
)

var _ = runtime.Compiler

/* Node 1 reads a user-entered number. */
func Node_1(qux chan<- int) {
	// Node 1

	fmt.Println("Node 1: Started.")
	fmt.Print("Enter a number: ")
	var n int
	fmt.Scanf("%d", &n)
	fmt.Printf("Node 1: Sending %d on qux...\n", n)
	qux <- n
	fmt.Println("Node 1: Finished.")
}

/* Node 2 prints the value it receives. */
func Node_2(foo <-chan int) {
	// Node 2

	fmt.Println("Node 2: Started.")
	fmt.Println("Node 2: Waiting on foo...")
	fmt.Printf("Node 2: Got %v on foo\n", <-foo)
	fmt.Println("Node 2: Finished.")
}

func main() {

	channel0 := make(chan int, 0)

	var wg sync.WaitGroup

	wg.Add(1)
	go func() {
		Node_1(channel0)
		wg.Done()
	}()

	wg.Add(1)
	go func() {
		Node_2(channel0)
		wg.Done()
	}()

	// Wait for the various goroutines to finish.
	wg.Wait()
}
